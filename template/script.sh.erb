#!/usr/bin/env bash

#
# Start RStudio Server
#

setup_env() {
  # Purge the module environment to avoid conflicts
  module purge

  # Load the require modules
  module load <%= context.modules %> <%= context.extra_modules %>

  # Activate conda env for R
  conda activate <%= context.conda_env %>

  # List loaded modules
  module list
}

setup_env

# Generate an `rsession` wrapper script
(
sed 's/^ \{2\}//' > "${RSESSION_WRAPPER_FILE}" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  export RSESSION_LOG_FILE="${PWD}/rsession.log"

  exec &>>"\${RSESSION_LOG_FILE}"

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession --r-libs-user "${R_LIBS_USER}" "\${@}"
EOL
)
chmod 700 "${RSESSION_WRAPPER_FILE}"

# Generate rserver configuration file with secure file permissions
(
cat > "${RSERVER_CONF}" << EOL
www-port=$port
database-config-file=$DB_CONF_FILE
auth-none=0
auth-pam-helper-path=$RSTUDIO_AUTH
auth-encrypt-password=0
auth-pam-require-password-prompt=0
auth-timeout-minutes 0
auth-stay-signed-in-days 60
server-user=$USER
secure-cookie-key-file=$RSTUDIO_COOKIE_FILE
server-data-dir=$RSTUDIO_DATA_DIR
server-pid-file=$RSTUDIO_DATA_DIR/rstudio-server.pid
rsession-path=$RSESSION_WRAPPER_FILE
rsession-which-r=$RSTUDIO_WHICH_R
rsession-ld-library-path=$CONDA_PREFIX/lib
server-working-dir=<%= context.path.to_s %>
EOL
)

# Create DB if there isn't one and update data dir
if [ ! -e $DB_CONF_FILE ]
then
  mkdir -p "$RSTUDIO_CONFIG_DIR" && cp "$RSTUDIO_ROOT/extras/conf/database.conf" "$DB_CONF_FILE"
  perl -pi -e "s@#directory=/var/lib/rstudio-server@directory=$RSTUDIO_DATA_DIR@" "$DB_CONF_FILE"
fi

set -x
# Launch the RStudio Server
echo "Starting up rserver..."

rserver --config-file "$RSERVER_CONF"
